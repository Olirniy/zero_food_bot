from telebot import types
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup

from app.bot import ZeroFoodBot
from builders.main_menu_builder import MainMenuBuilder
from keyboards.inline_keyboards import get_dish_keyboard, get_continue_checkout

# –•—Ä–∞–Ω–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

def init_handlers(bot: ZeroFoodBot) -> None:
    def show_categories(message: types.Message) -> None:
        if not bot.category_menu_builder:
            bot.send_message(chat_id=message.chat.id, text="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            return
        markup: InlineKeyboardMarkup = bot.category_menu_builder.build_menu()
        bot.send_message(chat_id=message.chat.id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)

    #–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    @bot.message_handler(commands=['start'])
    def cmd_start(message: types.Message) -> None:
        markup = MainMenuBuilder.build_menu(message.from_user.id)
        bot.send_message(chat_id=message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–∏ÃÜ—Å—Ç–≤–∏–µ:", reply_markup=markup)

    #–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–µ–Ω—é
    @bot.message_handler(commands=['show_menu'])
    def cmd_categories(message: types.Message) -> None:
        show_categories(message)

    @bot.callback_query_handler(func=lambda call: call.data and call.data.startswith("category_select:"))
    def process_category(callback_query: types.CallbackQuery) -> None:
        category_id: int = int(callback_query.data.split(":", 1)[1])
        category = bot.get_category_repository().get_by_id(category_id)
        if category:
            response_text: str = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ¬´{category.name}¬ª"
        else:
            response_text: str = "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        bot.answer_callback_query(callback_query_id=callback_query.id, text=response_text)

    #–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤
    @bot.message_handler(commands=['show_orders'])
    def show_orders(message: types.Message) -> None:
        pass



    @bot.callback_query_handler(func=lambda call: call.data.startswith('category_'))
    def show_dishes_by_category(call):
        category_id = int(call.data.split('_')[1])
        dishes = bot.get_dish_repository().get_by_category(category_id)

        if not dishes:
            bot.send_message(call.message.chat.id, "–ë–ª—é–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        for dish in dishes:
            try:
                with open(dish.photo_url, 'rb') as photo:
                    bot.send_photo(
                        chat_id=call.message.chat.id,
                        photo=photo,
                        caption=f"<b>{dish.name}</b>\n{dish.short_description}\n\n–¶–µ–Ω–∞: {dish.price} ‚ÇΩ",
                        parse_mode='HTML',
                        reply_markup=get_dish_keyboard(dish.id)
                    )
            except Exception as e:
                bot.send_message(call.message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ {dish.name}: {e}")

    @bot.callback_query_handler(func=lambda call: call.data.startswith('details_'))
    def show_dish_details(call):
        dish_id = int(call.data.split('_')[1])
        dish = bot.get_dish_repository().get_by_id(dish_id)
        if dish:
            bot.send_message(
                call.message.chat.id,
                f"<b>–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</b>\n{dish.description}",
                parse_mode='HTML'
            )

    @bot.callback_query_handler(func=lambda call: call.data.startswith('add_'))
    def add_to_cart(call):
        dish_id = int(call.data.split('_')[1])
        dish = bot.get_dish_repository().get_by_id(dish_id)

        msg = bot.send_message(
            call.message.chat.id,
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è '{dish.name}':"
        )
        bot.register_next_step_handler(msg, lambda m: ask_quantity(m, dish))

    def ask_quantity(message, dish):
        try:
            quantity = int(message.text)
            total_price = dish.price * quantity
            bot.send_message(
                message.chat.id,
                f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É:\n{dish.name} x{quantity}\n–ò—Ç–æ–≥–æ: {total_price} ‚ÇΩ",
                reply_markup=get_continue_checkout()
            )
        except ValueError:
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
            bot.register_next_step_handler(message, lambda m: ask_quantity(m, dish))

    @bot.callback_query_handler(func=lambda call: call.data == 'continue_shopping')
    def continue_shopping(call):
        show_categories(call.message)

    @bot.callback_query_handler(func=lambda call: call.data == 'checkout')
    def checkout_order(call):
        bot.send_message(call.message.chat.id, "–í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ.")


    # –ó–∞–ø—Ä–æ—Å –æ—Ç–∑—ã–≤–∞
    @bot.message_handler(commands=['add_feedback'])
    def leave_review(message: types.Message) -> None:
        user_id = message.from_user.id
        user_states[user_id] = "awaiting_review"
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–∞ –∏ –∑–∞–ø–∏—Å—å –æ—Ç–∑—ã–≤–∞ –≤ –±–∞–∑—É –æ—Ç–∑—ã–≤–æ–≤
    @bot.message_handler(content_types=['text'])
    def handle_message(message: types.Message) -> None:
        user_id = message.from_user.id
        text = message.text

        if user_states.get(user_id) == "awaiting_review":
            username = message.from_user.username or "–ë–µ–∑ –Ω–∏–∫–∞"
            from database import save_review
            save_review(user_id, username, text)
            bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!")
            user_states[user_id] = None
        else:
            bot.send_message(message.chat.id, "–Ø –Ω–µ –æ–∂–∏–¥–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤–∞—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã.")

    # –§—É–Ω–∫—Ü–∏—è –∞–¥–º–∏–Ω–∞ - –≤—ã–≤–æ–¥ –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤
    @bot.message_handler(commands=['admin_reviews'])
    def admin_reviews(message: types.Message) -> None:
        from config import ADMINS
        from database import get_all_reviews

        user_id = message.from_user.id

        if user_id not in ADMINS:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return

        reviews = bot.get_feedback_repository().get_all()

        if not reviews:
            bot.send_message(message.chat.id, "–û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
            return

        message_text = "üìã –í—Å–µ –æ—Ç–∑—ã–≤—ã:\n\n"
        for review in reviews:
            _, user_id, username, text, created_at = review
            message_text += f"üìÖ {created_at}\n"
            message_text += f"üë§ ID: {user_id}, @{username}\n"
            message_text += f"üìù –û—Ç–∑—ã–≤: {text}\n"
            message_text += "-" * 30 + "\n"

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        max_length = 4096
        for i in range(0, len(message_text), max_length):
            chunk = message_text[i:i + max_length]
            bot.send_message(message.chat.id, chunk)

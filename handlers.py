import os

from telebot import types
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup


from app.bot import ZeroFoodBot
from builders.main_menu_builder import MainMenuBuilder
from keyboards.inline_keyboards import get_dish_keyboard, get_continue_checkout, get_dish_keyboard_with_add
from config import DEFAULT_IMG_PATH
from models.enums import OrderStatus

# –•—Ä–∞–Ω–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

def init_handlers(bot: ZeroFoodBot) -> None:
    def show_categories(message: types.Message) -> None:
        print("show_categories")
        if not bot.category_menu_builder:
            bot.send_message(chat_id=message.chat.id, text="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            return
        markup: InlineKeyboardMarkup = bot.category_menu_builder.build_menu()
        bot.send_message(chat_id=message.chat.id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)

    # –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤
    def show_orders(message: types.Message) -> None:
        bot.send_message(message.chat.id, "–í–∞—à–∏ –∑–∞–∫–∞–∑—ã –±—É–¥—É—Ç –∑–¥–µ—Å—å")

    # –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
    def show_cart(message: types.Message) -> None:
        print("show_cart")
        user_id = message.chat.id

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "IN_CART"
        order = bot.get_order_repository().get_in_cart(user_id)

        if not order or not order.items:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –æ–Ω –ø—É—Å—Ç–æ–π
            bot.send_message(user_id, "üß∫ –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –±–ª—é–¥
        total = 0
        text = "üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n"
        for item in order.items:
            subtotal = item.quantity * item.dish_price
            total += subtotal
            text += f"üçΩ {item.dish_name} x{item.quantity} ‚Äî {subtotal}‚ÇΩ\n"
        text += f"\nüí∞ <b>–ò—Ç–æ–≥–æ:</b> {total}‚ÇΩ"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"
        markup = InlineKeyboardMarkup().add(
            InlineKeyboardButton("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="confirm_order")
        )
        bot.send_message(user_id, text, parse_mode='HTML', reply_markup=markup)

    # –ó–∞–ø—Ä–æ—Å –æ—Ç–∑—ã–≤–∞
    def leave_review(message: types.Message) -> None:
        print("leave_review")
        user_id = message.chat.id
        user_states[user_id] = "awaiting_review"
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:")
        return

    # –§—É–Ω–∫—Ü–∏—è –∞–¥–º–∏–Ω–∞ - –≤—ã–≤–æ–¥ –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤
    def admin_reviews(message: types.Message) -> None:
        print(f"admin_reviews {message.from_user.id} {message.from_user.username}")
        from config import ADMINS

        user_id = message.chat.id

        if user_id not in ADMINS:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return

        reviews = bot.get_feedback_repository().get_all()

        if not reviews:
            bot.send_message(message.chat.id, "–û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
            return

        message_text = "üìã –í—Å–µ –æ—Ç–∑—ã–≤—ã:\n\n"
        for review in reviews:
            message_text += f"üìÖ {review.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            message_text += f"üë§ @{review.user_name}\n"
            message_text += f"üìù –û—Ç–∑—ã–≤: {review.text}\n"
            message_text += "-" * 30 + "\n"

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        max_length = 4096
        for i in range(0, len(message_text), max_length):
            chunk = message_text[i:i + max_length]
            bot.send_message(message.chat.id, chunk)


    #–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    @bot.callback_query_handler(func=lambda call: call.data and call.data.startswith("cmd_"))
    def process_command(callback_query: types.CallbackQuery) -> None:
        print("process_command")
        command: str = callback_query.data.split(":", 1)[1]
        if command == "show_menu":
            show_categories(callback_query.message)
        elif command == "show_cart":
            show_cart(callback_query.message)
        elif command == "show_orders":
            show_orders(callback_query.message)
        elif command == "add_feedback":
            leave_review(callback_query.message)
        elif command == "show_feedbacks":
            admin_reviews(callback_query.message)
        elif command == "load_menu":
            pass
        elif command == "change_order_status":
            pass

    @bot.message_handler(commands=['start'])
    def cmd_start(message: types.Message) -> None:
        markup = MainMenuBuilder.build_menu(message.from_user.id)
        bot.send_message(chat_id=message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–∏ÃÜ—Å—Ç–≤–∏–µ:", reply_markup=markup)

    @bot.callback_query_handler(func=lambda call: call.data and call.data.startswith("category_select:"))
    def process_category(callback_query: types.CallbackQuery) -> None:
        print("process_category")
        category_id: int = int(callback_query.data.split(":", 1)[1])
        category = bot.get_category_repository().get_by_id(category_id)
        if category:
            show_dishes_by_category(callback_query, category.id)
        else:
            response_text: str = "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            bot.answer_callback_query(callback_query_id=callback_query.id, text=response_text)

    def show_dishes_by_category(call, category_id):
        print("show_dishes_by_category")
        dishes = bot.get_dish_repository().get_by_category(category_id)

        if not dishes:
            bot.send_message(call.message.chat.id, "–ë–ª—é–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        for dish in dishes:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –ø—É—Ç—å –∫ —Ñ–æ—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
            if dish.photo_url and os.path.exists(dish.photo_url):
                photo_path = dish.photo_url
            else:
                photo_path = DEFAULT_IMG_PATH

            try:
                with open(photo_path, 'rb') as photo:
                    bot.send_photo(
                        chat_id=call.message.chat.id,
                        photo=photo,
                        caption=(
                            f"<b>{dish.name}</b>\n"
                            f"{dish.short_description}\n\n"
                            f"–¶–µ–Ω–∞: {dish.price} ‚ÇΩ"
                        ),
                        parse_mode='HTML',
                        reply_markup=get_dish_keyboard_with_add(dish.id)
                    )
            except Exception as e:
                bot.send_message(
                    call.message.chat.id,
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ {dish.name}: {e}"
                )

    @bot.callback_query_handler(func=lambda call: call.data.startswith('details_'))
    def show_dish_details(call):
        print("show_dish_details")
        dish_id = int(call.data.split('_')[1])
        dish = bot.get_dish_repository().get_by_id(dish_id)
        if dish:
            # –ø–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π caption (–ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ)
            existing_caption: str = call.message.caption or ""
            # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π caption, –¥–æ–ø–∏—Å—ã–≤–∞—è –æ–ø–∏—Å–∞–Ω–∏–µ –∫ —Å—Ç–∞—Ä–æ–º—É
            new_caption: str = f"{existing_caption}\n\n<b>–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</b>\n{dish.description}"

            bot.edit_message_caption(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                caption=new_caption,
                parse_mode='HTML',
                reply_markup=get_dish_keyboard(dish.id)
            )

    @bot.callback_query_handler(func=lambda call: call.data.startswith('add_'))
    def add_to_cart(call):
        print("add_to_cart")
        dish_id = int(call.data.split('_')[1])
        dish = bot.get_dish_repository().get_by_id(dish_id)

        msg = bot.send_message(
            call.message.chat.id,
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è '{dish.name}':"
        )
        bot.register_next_step_handler(msg, lambda m: ask_quantity(m, dish))

    def ask_quantity(message, dish):
        print("ask_quantity")
        try:
            quantity = int(message.text)
        except ValueError:
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
            bot.register_next_step_handler(message, lambda m: ask_quantity(m, dish))
            return

        total_price = dish.price * quantity
        order = bot.get_order_repository().get_in_cart(message.from_user.id)
        if not order:
            order = bot.get_order_repository().create(message.from_user.id)

        order_item = order.get_item_by_dish_id(dish.id)
        if not order_item:
            order_item = bot.get_order_item_repository().new_item(order_id=order.id, dish_id=dish.id, dish_name=dish.name, dish_price=dish.price, quantity= quantity)
        else:
            order_item.quantity += quantity
        order.update_item(order_item)
        bot.get_order_repository().save(order)
        bot.send_message(
            message.chat.id,
                f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É:\n{dish.name} x{quantity}\n–ò—Ç–æ–≥–æ: {total_price} ‚ÇΩ",
            reply_markup=get_continue_checkout()
        )


    @bot.callback_query_handler(func=lambda call: call.data == 'continue_shopping')
    def continue_shopping(call):
        print("continue_shopping")
        show_categories(call.message)

    @bot.callback_query_handler(func=lambda call: call.data == 'checkout')
    def checkout_order(call):
        print("checkout_order")
        bot.send_message(call.message.chat.id, "–í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ.")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–∞ –∏ –∑–∞–ø–∏—Å—å –æ—Ç–∑—ã–≤–∞ –≤ –±–∞–∑—É –æ—Ç–∑—ã–≤–æ–≤
    @bot.message_handler(content_types=['text'])
    def handle_message(message: types.Message) -> None:
        print("handle_message")
        user_id = message.chat.id
        user_name = message.chat.username
        text = message.text

        if user_states.get(user_id) == "awaiting_review":
            bot.get_feedback_repository().new_feedback(user_id, user_name, text)
            bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!")
            user_states[user_id] = None
        else:
            bot.send_message(message.chat.id, "–Ø –Ω–µ –æ–∂–∏–¥–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤–∞—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã.")

    @bot.callback_query_handler(func=lambda call: call.data == 'confirm_order')
    def confirm_order(call: types.CallbackQuery) -> None:
        print("confirm_order")
        user_id = call.from_user.id

        # –°–Ω–æ–≤–∞ –ø–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ ‚Äî –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
        order = bot.get_order_repository().get_in_cart(user_id)

        if not order:
            # –ï—Å–ª–∏ –∑–∞–∫–∞–∑–∞ –Ω–µ—Ç ‚Äî —Å–æ–æ–±—â–∞–µ–º
            bot.answer_callback_query(call.id, text="–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
            return

        # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ "PENDING"
        order.status = OrderStatus.PENDING
        bot.get_order_repository().save(order)

        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="‚úÖ –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
        from config import ADMINS
        for admin_id in ADMINS:
            bot.send_message(
                admin_id,
                f"üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.\n"
                f"–°—É–º–º–∞: {sum(i.quantity * i.dish_price for i in order.items)}‚ÇΩ"
            )

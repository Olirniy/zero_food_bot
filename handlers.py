from telebot import types
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup

from app.bot import ZeroFoodBot
from builders.category_builder import CategoryMenuBuilder



def init_handlers(bot: ZeroFoodBot) -> None:
    #–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–µ–Ω—é
    @bot.message_handler(commands=['show_menu'])
    def cmd_categories(message: types.Message) -> None:
        if not bot.category_menu_builder:
            bot.send_message(chat_id=message.chat.id, text="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            return
        markup: InlineKeyboardMarkup = bot.category_menu_builder.build_menu()
        bot.send_message(chat_id=message.chat.id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)

    @bot.callback_query_handler(func=lambda call: call.data and call.data.startswith("category_select:"))
    def process_category(callback_query: types.CallbackQuery) -> None:
        category_id: int = int(callback_query.data.split(":", 1)[1])
        category = bot.get_category_repository().get_by_id(category_id)
        if category:
            response_text: str = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ¬´{category.name}¬ª"
        else:
            response_text: str = "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
<<<<<<< Updated upstream
        bot.answer_callback_query(callback_query_id=callback_query.id, text=response_text)
=======
        bot.answer_callback_query(callback_query_id=callback_query.id, text=response_text)

# –•—Ä–∞–Ω–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –ó–∞–ø—Ä–æ—Å –æ—Ç–∑—ã–≤–∞
async def leave_review(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_states[user_id] = "awaiting_review"
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–∞ –∏ –∑–∞–ø–∏—Å—å –æ—Ç–∑—ã–≤–∞ –≤ –±–∞–∑—É –æ—Ç–∑—ã–≤–æ–≤
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text

    if user_states.get(user_id) == "awaiting_review":
        username = update.effective_user.username or "–ë–µ–∑ –Ω–∏–∫–∞"
        from database import save_review  # –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
        save_review(user_id, username, text)
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!")
        user_states[user_id] = None
    else:
        await update.message.reply_text("–Ø –Ω–µ –æ–∂–∏–¥–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤–∞—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã.")

async def admin_reviews(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from config import ADMIN_ID
    from database import get_all_reviews

    user_id = update.effective_user.id

    if user_id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    reviews = get_all_reviews()

    if not reviews:
        await update.message.reply_text("–û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    message = "üìã –í—Å–µ –æ—Ç–∑—ã–≤—ã:\n\n"
    for review in reviews:
        _, user_id, username, text, created_at = review
        message += f"üìÖ {created_at}\n"
        message += f"üë§ ID: {user_id}, @{username}\n"
        message += f"üìù –û—Ç–∑—ã–≤: {text}\n"
        message += "-" * 30 + "\n"

    if len(message) > 4096:
        for chunk in [message[i:i+4096] for i in range(0, len(message), 4096)]:
            await update.message.reply_text(chunk)
    else:
        await update.message.reply_text(message)
>>>>>>> Stashed changes

Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import telebot\r\nimport threading\r\nfrom config import TG_API_KEY\r\nfrom log_funcs import logger\r\n\r\nbot=telebot.TeleBot(TG_API_KEY)\r\ninit_bot(bot)\r\n# –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞\r\nthreading.Thread(target=lambda: schedule_poll(bot), daemon=True).start()\r\n\r\n#print(\"bot is running\")\r\nlogger.info(\"bot is running\")\r\nbot.infinity_polling(timeout=10, long_polling_timeout=5)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision 302c975737dabe1819f7eb9696901e1e99f81011)
+++ b/main.py	(date 1747981796348)
@@ -1,13 +1,69 @@
+# main.py
 import telebot
-import threading
-from config import TG_API_KEY
+from config import TG_API_KEY, SQL_DATA
 from log_funcs import logger
+from storage.db_session import DBSession
+from storage.user_storage import UserStorage
+from models.user import User
+
+def main():
+    try:
+        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
+        db_session = DBSession(SQL_DATA["db_path"])
+        user_storage = UserStorage(db_session, SQL_DATA)
 
-bot=telebot.TeleBot(TG_API_KEY)
-init_bot(bot)
-# –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞
-threading.Thread(target=lambda: schedule_poll(bot), daemon=True).start()
+        bot = telebot.TeleBot(TG_API_KEY)
+
+        @bot.message_handler(commands=['start'])
+        def handle_start(message):
+            try:
+                user = user_storage.load_by_telegram_id(message.from_user.id)
+                if not user:
+                    user = User(id=0, telegram_id=message.from_user.id,
+                              username=message.from_user.username or "unknown")
+                    user_storage.save(user)
+                    user = user_storage.load_by_telegram_id(message.from_user.id)
+                    bot.reply_to(message, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
+                else:
+                    bot.reply_to(message, "üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!")
+            except Exception as e:
+                logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
+                bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
+
+        @bot.message_handler(commands=['ping'])
+        def ping(message):
+            bot.reply_to(message, "üèì Pong!")
+
+        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
+        bot.infinity_polling()
+
+    except Exception as e:
+        logger.error(f"–û—à–∏–±–∫–∞ –≤ main: {e}")
+        raise
+
+if __name__ == "__main__":
+    main()
+
+
 
-#print("bot is running")
-logger.info("bot is running")
-bot.infinity_polling(timeout=10, long_polling_timeout=5)
\ No newline at end of file
+
+
+
+
+
+
+
+
+# import telebot
+# import threading
+# from config import TG_API_KEY
+# from log_funcs import logger
+#
+# bot=telebot.TeleBot(TG_API_KEY)
+# init_bot(bot)
+# # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞
+# threading.Thread(target=lambda: schedule_poll(bot), daemon=True).start()
+#
+# #print("bot is running")
+# logger.info("bot is running")
+# bot.infinity_polling(timeout=10, long_polling_timeout=5)
\ No newline at end of file
Index: storage/dish_storage.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from typing import List, Optional, TYPE_CHECKING\r\n\r\nif TYPE_CHECKING:\r\n    from storage.db_session import DBSession\r\n    from models.dish import Dish\r\n\r\nclass DishStorage:\r\n    def __init__(self, db_session: 'DBSession', sql_data: dict[str, str]) -> None:\r\n        self._db_session = db_session\r\n        self._sql_data = sql_data\r\n        self._init_table()\r\n\r\n    def _init_table(self) -> None:\r\n        pass\r\n\r\n    def save(self, dish: 'Dish') -> None:\r\n        pass\r\n\r\n    def load_by_id(self, id: int) -> Optional['Dish']:\r\n        pass\r\n\r\n    def load_by_category(self, category_id: int) -> List['Dish']:\r\n        pass
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/storage/dish_storage.py b/storage/dish_storage.py
--- a/storage/dish_storage.py	(revision 302c975737dabe1819f7eb9696901e1e99f81011)
+++ b/storage/dish_storage.py	(date 1747980375903)
@@ -1,8 +1,8 @@
 from typing import List, Optional, TYPE_CHECKING
+from models.dish import Dish
 
 if TYPE_CHECKING:
     from storage.db_session import DBSession
-    from models.dish import Dish
 
 class DishStorage:
     def __init__(self, db_session: 'DBSession', sql_data: dict[str, str]) -> None:
@@ -11,13 +11,75 @@
         self._init_table()
 
     def _init_table(self) -> None:
-        pass
+        with self._db_session.get_session() as conn:
+            conn.execute('''
+                CREATE TABLE IF NOT EXISTS dishes (
+                    id INTEGER PRIMARY KEY AUTOINCREMENT,
+                    category_id INTEGER NOT NULL,
+                    name TEXT NOT NULL,
+                    short_description TEXT,
+                    description TEXT,
+                    price REAL NOT NULL,
+                    photo_url TEXT,
+                    FOREIGN KEY (category_id) REFERENCES categories(id)
+                )
+            ''')
+            conn.commit()
 
     def save(self, dish: 'Dish') -> None:
-        pass
+        with self._db_session.get_session() as conn:
+            conn.execute(
+                '''
+                INSERT OR REPLACE INTO dishes 
+                (id, category_id, name, short_description, description, price, photo_url)
+                VALUES (?, ?, ?, ?, ?, ?, ?)
+                ''',
+                (dish.id, dish.category_id, dish.name, dish.short_description,
+                 dish.description, dish.price, dish.photo_url)
+            )
+            conn.commit()
 
     def load_by_id(self, id: int) -> Optional['Dish']:
-        pass
+        with self._db_session.get_session() as conn:
+            row = conn.execute(
+                "SELECT * FROM dishes WHERE id = ?", (id,)
+            ).fetchone()
+            return Dish(*row[1:]) if row else None
 
     def load_by_category(self, category_id: int) -> List['Dish']:
-        pass
\ No newline at end of file
+        with self._db_session.get_session() as conn:
+            rows = conn.execute(
+                "SELECT * FROM dishes WHERE category_id = ?", (category_id,)
+            ).fetchall()
+            return [Dish(*row[1:]) for row in rows]
+
+
+
+
+
+
+
+
+# from typing import List, Optional, TYPE_CHECKING
+#
+# if TYPE_CHECKING:
+#     from storage.db_session import DBSession
+#     from models.dish import Dish
+#
+# class DishStorage:
+#     def __init__(self, db_session: 'DBSession', sql_data: dict[str, str]) -> None:
+#         self._db_session = db_session
+#         self._sql_data = sql_data
+#         self._init_table()
+#
+#     def _init_table(self) -> None:
+#         pass
+#
+#     def save(self, dish: 'Dish') -> None:
+#         pass
+#
+#     def load_by_id(self, id: int) -> Optional['Dish']:
+#         pass
+#
+#     def load_by_category(self, category_id: int) -> List['Dish']:
+#         pass
\ No newline at end of file
Index: storage/category_storage.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from typing import Optional, List, TYPE_CHECKING\r\n\r\nif TYPE_CHECKING:\r\n    from models.category import Category\r\n    from storage.db_session import DBSession\r\n\r\n\r\nclass CategoryStorage:\r\n    def __init__(self, db_session: 'DBSession', sql_data: dict[str, str]) -> None:\r\n        self._db_session = db_session\r\n        self._sql_data = sql_data  #–¥–∞–Ω–Ω—ã–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º —Ç–∞–±–ª–∏—á–µ–∫, –ø—É—Ç–∏ –∫ –ë–î –∏ —Ç.–ø.\r\n        self._init_table()\r\n\r\n    def _init_table(self) -> None:\r\n        pass\r\n\r\n    def save(self, category: 'Category') -> None:\r\n        pass\r\n\r\n    def load_by_id(self, id: int) -> Optional['Category']:\r\n        pass\r\n\r\n    def load_all(self) -> List['Category']:\r\n        pass
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/storage/category_storage.py b/storage/category_storage.py
--- a/storage/category_storage.py	(revision 302c975737dabe1819f7eb9696901e1e99f81011)
+++ b/storage/category_storage.py	(date 1747981647924)
@@ -1,24 +1,73 @@
+# storage/category_storage.py
 from typing import Optional, List, TYPE_CHECKING
-
-if TYPE_CHECKING:
-    from models.category import Category
+from models.category import Category
+
+if TYPE_CHECKING:
     from storage.db_session import DBSession
 
-
 class CategoryStorage:
     def __init__(self, db_session: 'DBSession', sql_data: dict[str, str]) -> None:
         self._db_session = db_session
-        self._sql_data = sql_data  #–¥–∞–Ω–Ω—ã–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º —Ç–∞–±–ª–∏—á–µ–∫, –ø—É—Ç–∏ –∫ –ë–î –∏ —Ç.–ø.
+        self._sql_data = sql_data
         self._init_table()
 
     def _init_table(self) -> None:
-        pass
+        with self._db_session.get_session() as conn:
+            conn.execute(f'''
+                CREATE TABLE IF NOT EXISTS {self._sql_data["tables"]["categories"]} (
+                    id INTEGER PRIMARY KEY AUTOINCREMENT,
+                    name TEXT NOT NULL
+                )
+            ''')
+            conn.commit()
 
     def save(self, category: 'Category') -> None:
-        pass
+        with self._db_session.get_session() as conn:
+            conn.execute(
+                f"INSERT OR REPLACE INTO {self._sql_data['tables']['categories']} (id, name) VALUES (?, ?)",
+                (category.id, category.name)
+            )
+            conn.commit()
 
     def load_by_id(self, id: int) -> Optional['Category']:
-        pass
+        with self._db_session.get_session() as conn:
+            row = conn.execute(
+                f"SELECT id, name FROM {self._sql_data['tables']['categories']} WHERE id = ?", (id,)
+            ).fetchone()
+            return Category(*row) if row else None
 
     def load_all(self) -> List['Category']:
-        pass
\ No newline at end of file
+        with self._db_session.get_session() as conn:
+            rows = conn.execute(f"SELECT id, name FROM {self._sql_data['tables']['categories']}").fetchall()
+            return [Category(*row) for row in rows]
+
+
+
+
+
+
+
+# from typing import Optional, List, TYPE_CHECKING
+#
+# if TYPE_CHECKING:
+#     from models.category import Category
+#     from storage.db_session import DBSession
+#
+#
+# class CategoryStorage:
+#     def __init__(self, db_session: 'DBSession', sql_data: dict[str, str]) -> None:
+#         self._db_session = db_session
+#         self._sql_data = sql_data  #–¥–∞–Ω–Ω—ã–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º —Ç–∞–±–ª–∏—á–µ–∫, –ø—É—Ç–∏ –∫ –ë–î –∏ —Ç.–ø.
+#         self._init_table()
+#
+#     def _init_table(self) -> None:
+#         pass
+#
+#     def save(self, category: 'Category') -> None:
+#         pass
+#
+#     def load_by_id(self, id: int) -> Optional['Category']:
+#         pass
+#
+#     def load_all(self) -> List['Category']:
+#         pass
\ No newline at end of file
Index: storage/db_session.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\nclass DBSession:\r\n    def __init__(self, db_path: str):\r\n        pass\r\n\r\n    def get_session(self):\r\n        pass\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/storage/db_session.py b/storage/db_session.py
--- a/storage/db_session.py	(revision 302c975737dabe1819f7eb9696901e1e99f81011)
+++ b/storage/db_session.py	(date 1747981381637)
@@ -1,7 +1,50 @@
+# storage/db_session.py
+import sqlite3
+from typing import Any
 
 class DBSession:
     def __init__(self, db_path: str):
-        pass
+        self.db_path = db_path
+        self.connection = None
+
+    def get_session(self) -> sqlite3.Connection:
+        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å SQLite."""
+        if self.connection is None:
+            self.connection = sqlite3.connect(self.db_path)
+        return self.connection
+
+    def close(self):
+        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î."""
+        if self.connection:
+            self.connection.close()
+
+
+
+
+
 
-    def get_session(self):
-        pass
+
+
+# import sqlite3
+# from typing import Any
+#
+# class DBSession:
+#     def __init__(self, db_path: str):
+#         self.db_path = db_path
+#
+#     def get_session(self) -> sqlite3.Connection:
+#         """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å SQLite."""
+#         return sqlite3.connect(self.db_path)
+
+
+
+
+
+
+#
+# class DBSession:
+#     def __init__(self, db_path: str):
+#         pass
+#
+#     def get_session(self):
+#         pass
Index: storage/user_storage.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from typing import Optional, TYPE_CHECKING\r\n\r\nif TYPE_CHECKING:\r\n    from models.user import User\r\n    from storage.db_session import DBSession\r\n\r\n\r\nclass UserStorage:\r\n    def __init__(self, db_session: 'DBSession', sql_data: dict[str, str]) -> None:\r\n        self._db_session = db_session\r\n        self._sql_data = sql_data\r\n        self._init_table()\r\n\r\n    def _init_table(self) -> None:\r\n        pass\r\n\r\n    def save(self, user: 'User') -> None:\r\n        pass\r\n\r\n    def load_by_telegram_id(self, telegram_id: int) -> Optional['User']:\r\n        pass\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/storage/user_storage.py b/storage/user_storage.py
--- a/storage/user_storage.py	(revision 302c975737dabe1819f7eb9696901e1e99f81011)
+++ b/storage/user_storage.py	(date 1747981448050)
@@ -1,10 +1,10 @@
+# storage/user_storage.py
 from typing import Optional, TYPE_CHECKING
-
-if TYPE_CHECKING:
-    from models.user import User
+from models.user import User
+
+if TYPE_CHECKING:
     from storage.db_session import DBSession
 
-
 class UserStorage:
     def __init__(self, db_session: 'DBSession', sql_data: dict[str, str]) -> None:
         self._db_session = db_session
@@ -12,10 +12,59 @@
         self._init_table()
 
     def _init_table(self) -> None:
-        pass
+        with self._db_session.get_session() as conn:
+            conn.execute(f'''
+                CREATE TABLE IF NOT EXISTS {self._sql_data["tables"]["users"]} (
+                    id INTEGER PRIMARY KEY AUTOINCREMENT,
+                    telegram_id INTEGER UNIQUE NOT NULL,
+                    username TEXT
+                )
+            ''')
+            conn.commit()
 
     def save(self, user: 'User') -> None:
-        pass
+        with self._db_session.get_session() as conn:
+            conn.execute(
+                f"INSERT OR REPLACE INTO {self._sql_data['tables']['users']} (id, telegram_id, username) VALUES (?, ?, ?)",
+                (user.id, user.telegram_id, user.username)
+            )
+            conn.commit()
 
     def load_by_telegram_id(self, telegram_id: int) -> Optional['User']:
-        pass
+        with self._db_session.get_session() as conn:
+            row = conn.execute(
+                f"SELECT id, telegram_id, username FROM {self._sql_data['tables']['users']} WHERE telegram_id = ?",
+                (telegram_id,)
+            ).fetchone()
+            return User(*row) if row else None
+
+
+
+
+
+
+
+
+
+
+# from typing import Optional, TYPE_CHECKING
+#
+# if TYPE_CHECKING:
+#     from models.user import User
+#     from storage.db_session import DBSession
+#
+#
+# class UserStorage:
+#     def __init__(self, db_session: 'DBSession', sql_data: dict[str, str]) -> None:
+#         self._db_session = db_session
+#         self._sql_data = sql_data
+#         self._init_table()
+#
+#     def _init_table(self) -> None:
+#         pass
+#
+#     def save(self, user: 'User') -> None:
+#         pass
+#
+#     def load_by_telegram_id(self, telegram_id: int) -> Optional['User']:
+#         pass
Index: repository/category_repo.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from typing import List, Optional, TYPE_CHECKING\r\n\r\n\r\n\r\nif TYPE_CHECKING:\r\n    from models.category import Category\r\n    from storage.category_storage import CategoryStorage\r\n\r\n\r\nclass CategoryRepository:\r\n    def __init__(self, storage: 'CategoryStorage') -> None:\r\n        self._storage: 'CategoryStorage' = storage\r\n\r\n    def get_all(self) -> List['Category']:\r\n        pass\r\n\r\n    def get_by_id(self, id: int) -> Optional['Category']:\r\n        pass\r\n\r\n    def create(self, category: 'Category') -> None:\r\n        pass\r\n\r\n    def delete_all(self) -> None:\r\n        pass
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/repository/category_repo.py b/repository/category_repo.py
--- a/repository/category_repo.py	(revision 302c975737dabe1819f7eb9696901e1e99f81011)
+++ b/repository/category_repo.py	(date 1747981712054)
@@ -1,24 +1,54 @@
+# repository/category_repo.py
 from typing import List, Optional, TYPE_CHECKING
 
-
-
 if TYPE_CHECKING:
     from models.category import Category
     from storage.category_storage import CategoryStorage
 
-
 class CategoryRepository:
     def __init__(self, storage: 'CategoryStorage') -> None:
-        self._storage: 'CategoryStorage' = storage
+        self._storage = storage
 
     def get_all(self) -> List['Category']:
-        pass
+        return self._storage.load_all()
 
     def get_by_id(self, id: int) -> Optional['Category']:
-        pass
+        return self._storage.load_by_id(id)
 
     def create(self, category: 'Category') -> None:
-        pass
+        self._storage.save(category)
 
     def delete_all(self) -> None:
-        pass
\ No newline at end of file
+        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –º–µ—Ç–æ–¥–∞ –≤ storage
+        pass
+
+
+
+
+
+
+
+# from typing import List, Optional, TYPE_CHECKING
+#
+#
+#
+# if TYPE_CHECKING:
+#     from models.category import Category
+#     from storage.category_storage import CategoryStorage
+#
+#
+# class CategoryRepository:
+#     def __init__(self, storage: 'CategoryStorage') -> None:
+#         self._storage: 'CategoryStorage' = storage
+#
+#     def get_all(self) -> List['Category']:
+#         pass
+#
+#     def get_by_id(self, id: int) -> Optional['Category']:
+#         pass
+#
+#     def create(self, category: 'Category') -> None:
+#         pass
+#
+#     def delete_all(self) -> None:
+#         pass
\ No newline at end of file

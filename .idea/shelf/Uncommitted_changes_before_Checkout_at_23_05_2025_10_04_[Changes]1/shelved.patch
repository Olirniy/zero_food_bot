Index: config.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n  \"admins\" : [463653491],\r\n  \"logs_directory\" : \"logs/\",\r\n  \"debug_mode\" : 0,\r\n  \"logs_directory_deb\" : \"logs/\"\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/config.json b/config.json
--- a/config.json	(revision ca6429713871e16df24dba073fec84ee60c9dc10)
+++ b/config.json	(date 1747983353451)
@@ -1,6 +1,21 @@
 {
-  "admins" : [463653491],
-  "logs_directory" : "logs/",
-  "debug_mode" : 0,
-  "logs_directory_deb" : "logs/"
-}
\ No newline at end of file
+  "admins": [463653491],
+  "logs_directory": "logs/",
+  "debug_mode": 0,
+  "logs_directory_deb": "logs_debug/",
+  "db_path": "bot.db",
+  "tables": {
+    "users": "users",
+    "categories": "categories",
+    "dishes": "dishes",
+    "orders": "orders",
+    "order_items": "order_items",
+    "feedbacks": "feedbacks"
+  }
+}
+
+
+
+
+
+
Index: storage.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/storage.py b/storage.py
new file mode 100644
--- /dev/null	(date 1747983353533)
+++ b/storage.py	(date 1747983353533)
@@ -0,0 +1,103 @@
+import telebot
+from config import TG_API_KEY
+from log_funcs import logger
+from storage.db import init_db
+import time
+from storage.db import engine, init_db
+from sqlalchemy import inspect
+from telebot import types
+import logging
+from urllib.parse import urlparse
+
+logger = logging.getLogger(__name__)
+
+
+def check_tables():
+    init_db()
+    inspector = inspect(engine)
+    print("–¢–∞–±–ª–∏—Ü—ã –≤ –ë–î:", inspector.get_table_names())
+
+check_tables()
+
+
+
+def main():
+    try:
+        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î (–±–µ–∑ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü)
+        init_db()
+        check_tables()
+
+        bot = telebot.TeleBot(TG_API_KEY)
+
+        @bot.message_handler(commands=['start'])
+        def handle_start(message):
+            from models.user import User
+            from storage.user_storage import add_user, get_user_by_telegram_id
+            import time
+
+            try:
+                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –ë–î
+                existing_user = get_user_by_telegram_id(message.from_user.id)
+                if existing_user:
+                    bot.reply_to(message, "üëã –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
+                    return
+
+                # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞
+                time.sleep(0.5)
+
+                user = User(
+                    telegram_id=message.from_user.id,
+                    username=message.from_user.username,
+                    first_name=message.from_user.first_name
+                )
+                add_user(user)
+
+                welcome_text = """
+               üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FoodNinja!</b>
+
+               –Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –º–µ–Ω—é –≤–∞—à–µ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –∏–ª–∏ –∫–∞—Ñ–µ.
+
+               üìå –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
+               /help - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
+               /adddish - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –±–ª—é–¥–æ
+               /dishes - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
+               /all_dishes - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–µ—Å—å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –±–ª—é–¥
+               /ping - –ü—Ä–æ–≤–µ—Ä—å –∫–æ–Ω–Ω–µ–∫—Ç —Å —Å–µ—Ä–≤–µ—Ä–æ–º
+
+               –ù–∞—á–Ω–∏—Ç–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —á–µ—Ä–µ–∑ /addcategory, –∑–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–π—Ç–µ –±–ª—é–¥–∞ —á–µ—Ä–µ–∑ /adddish.
+                       """
+                bot.reply_to(message, welcome_text, parse_mode='HTML')
+
+            except Exception as e:
+                logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
+                time.sleep(1)  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
+                bot.reply_to(message, "üîÅ –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.")
+
+
+
+        @bot.message_handler(commands=['ping'])
+        def ping(message):
+            try:
+                bot.reply_to(message, "üèì Pong!")
+            except Exception as e:
+                logger.error(f"Connection error: {e}")
+
+        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
+
+        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
+        bot.infinity_polling(long_polling_timeout=10)
+
+    except Exception as e:
+        logger.error(f"–û—à–∏–±–∫–∞ –≤ main: {e}")
+        raise
+
+
+if __name__ == "__main__":
+    main()
+    try:
+        # –£–¥–µ—Ä–∂–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —á—Ç–æ–±—ã –±–æ—Ç —Ä–∞–±–æ—Ç–∞–ª
+        while True:
+            time.sleep(0.5)
+    except KeyboardInterrupt:
+        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
+
Index: repository/user_repo.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from typing import Optional, TYPE_CHECKING\r\n\r\nif TYPE_CHECKING:\r\n    from storage.user_storage import UserStorage\r\n    from models.user import User\r\n\r\n\r\nclass UserRepository:\r\n    def __init__(self, storage: 'UserStorage') -> None:\r\n        self._storage: 'UserStorage' = storage\r\n\r\n    def get_or_create(self, telegram_id: int, username: str) -> 'User':\r\n        pass\r\n\r\n    def get_by_telegram_id(self, telegram_id: int) -> Optional['User']:\r\n        pass\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/repository/user_repo.py b/repository/user_repo.py
--- a/repository/user_repo.py	(revision ca6429713871e16df24dba073fec84ee60c9dc10)
+++ b/repository/user_repo.py	(date 1747983353418)
@@ -1,17 +1,40 @@
+# repository/user_repo.py
 from typing import Optional, TYPE_CHECKING
 
 if TYPE_CHECKING:
     from storage.user_storage import UserStorage
     from models.user import User
 
-
 class UserRepository:
     def __init__(self, storage: 'UserStorage') -> None:
-        self._storage: 'UserStorage' = storage
+        self._storage = storage
 
     def get_or_create(self, telegram_id: int, username: str) -> 'User':
-        pass
+        user = self._storage.load_by_telegram_id(telegram_id)
+        if not user:
+            user = User(id=0, telegram_id=telegram_id, username=username)
+            self._storage.save(user)
+            user = self._storage.load_by_telegram_id(telegram_id)
+        return user
 
     def get_by_telegram_id(self, telegram_id: int) -> Optional['User']:
-        pass
+        return self._storage.load_by_telegram_id(telegram_id)
+
+
+
+
+
+
+
+#
+#
+# class UserRepository:
+#     def __init__(self, storage: 'UserStorage') -> None:
+#         self._storage: 'UserStorage' = storage
+#
+#     def get_or_create(self, telegram_id: int, username: str) -> 'User':
+#         pass
+#
+#     def get_by_telegram_id(self, telegram_id: int) -> Optional['User']:
+#         pass
 

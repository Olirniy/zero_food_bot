import telebot
from config import TG_API_KEY
from log_funcs import logger
# from storage.db import init_db
import time
from storage.db import engine, init_db
from sqlalchemy import inspect

def check_tables():
    init_db()
    inspector = inspect(engine)
    print("–¢–∞–±–ª–∏—Ü—ã –≤ –ë–î:", inspector.get_table_names())

check_tables()


def main():
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î (–±–µ–∑ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü)
        init_db()

        bot = telebot.TeleBot(TG_API_KEY)
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

        @bot.message_handler(commands=['addcategory'])
        def handle_add_category(message):
            try:
                msg = bot.reply_to(message, "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
                bot.register_next_step_handler(msg, process_category_name_step)
            except Exception as e:
                bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
                logger.error(f"Error in addcategory handler: {e}")

        def process_category_name_step(message):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É
                if message.text.startswith('/'):
                    bot.reply_to(message, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∞ –Ω–µ –∫–æ–º–∞–Ω–¥—É")
                    return

                category_name = message.text.strip()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è
                if len(category_name) > 50:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–∞–∫ –≤ –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏ (VARCHAR(50))
                    bot.reply_to(message, "‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å. 50 —Å–∏–º–≤–æ–ª–æ–≤)")
                    return

                msg = bot.reply_to(message, "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
                bot.register_next_step_handler(msg, process_category_desc_step, category_name)
            except Exception as e:
                bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
                logger.error(f"Error in process_category_name_step: {e}")

        def process_category_desc_step(message, category_name):
            try:
                from storage.category_storage import add_category  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–º–µ–Ω–Ω–æ —Ç–∞–∫, –∫–∞–∫ —É –≤–∞—Å

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–ø—É—Å–∫ –æ–ø–∏—Å–∞–Ω–∏—è
                if message.text == '/skip':
                    category_description = None
                else:
                    category_description = message.text.strip()
                    if len(category_description) > 255:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–∞–∫ –≤ –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏ (VARCHAR(255))
                        bot.reply_to(message, "‚ö†Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å. 255 —Å–∏–º–≤–æ–ª–æ–≤)")
                        return

                # –ü—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                add_category(category_name, category_description)
                bot.reply_to(message, f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

            except ValueError as e:
                bot.reply_to(message, f"‚ùå {str(e)}")
            except Exception as e:
                bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
                logger.error(f"Error adding category: {e}")



        @bot.message_handler(commands=['categories'])
        def handle_list_categories(message):
            from storage.category_storage import get_categories
            categories = get_categories()
            if categories:
                response = "\n".join([f"{c.id}. {c.name}" for c in categories])
            else:
                response = "–ö–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–∫–∞ –Ω–µ—Ç"
            bot.reply_to(message, f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:\n{response}")

        @bot.message_handler(commands=['adddish'])
        def handle_add_dish(message):
            try:
                # –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                msg = bot.reply_to(message, "üìù –í–≤–µ–¥–∏—Ç–µ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –±–ª—é–¥–∞:")
                bot.register_next_step_handler(msg, process_dish_category_step)
            except Exception as e:
                bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
                logger.error(f"Error in adddish handler: {e}")

        def process_dish_category_step(message):
            try:
                if message.text.startswith('/'):
                    bot.reply_to(message, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∞ –Ω–µ –∫–æ–º–∞–Ω–¥—É")
                    return

                try:
                    category_id = int(message.text.strip())
                except ValueError:
                    bot.reply_to(message, "‚ö†Ô∏è ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
                    return

                msg = bot.reply_to(message, "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞:")
                bot.register_next_step_handler(msg, process_dish_name_step, category_id)
            except Exception as e:
                bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
                logger.error(f"Error in process_dish_category_step: {e}")

        def process_dish_name_step(message, category_id):
            try:
                if message.text.startswith('/'):
                    bot.reply_to(message, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞, –∞ –Ω–µ –∫–æ–º–∞–Ω–¥—É")
                    return

                dish_name = message.text.strip()
                if len(dish_name) > 100:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–∞–∫ –≤ –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏ (VARCHAR(100))
                    bot.reply_to(message, "‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å. 100 —Å–∏–º–≤–æ–ª–æ–≤)")
                    return

                msg = bot.reply_to(message, "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞ (–∏–ª–∏ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
                bot.register_next_step_handler(msg, process_dish_desc_step, category_id, dish_name)
            except Exception as e:
                bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
                logger.error(f"Error in process_dish_name_step: {e}")

        def process_dish_desc_step(message, category_id, dish_name):
            try:
                if message.text == '/skip':
                    dish_description = None
                else:
                    if message.text.startswith('/'):
                        bot.reply_to(message, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞, –∞ –Ω–µ –∫–æ–º–∞–Ω–¥—É")
                        return

                    dish_description = message.text.strip()
                    if len(dish_description) > 255:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–∞–∫ –≤ –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏ (VARCHAR(255))
                        bot.reply_to(message, "‚ö†Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å. 255 —Å–∏–º–≤–æ–ª–æ–≤)")
                        return

                msg = bot.reply_to(message, "üìù –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –±–ª—é–¥–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 250.50):")
                bot.register_next_step_handler(msg, process_dish_price_step, category_id, dish_name, dish_description)
            except Exception as e:
                bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
                logger.error(f"Error in process_dish_desc_step: {e}")

        def process_dish_price_step(message, category_id, dish_name, dish_description):
            try:
                if message.text.startswith('/'):
                    bot.reply_to(message, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É, –∞ –Ω–µ –∫–æ–º–∞–Ω–¥—É")
                    return

                try:
                    price = float(message.text.strip())
                    if price <= 0:
                        bot.reply_to(message, "‚ö†Ô∏è –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è")
                        return
                except ValueError:
                    bot.reply_to(message, "‚ö†Ô∏è –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 250 –∏–ª–∏ 199.99)")
                    return

                msg = bot.reply_to(message, "üìù –í–≤–µ–¥–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∏–ª–∏ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
                bot.register_next_step_handler(msg, process_dish_image_step, category_id, dish_name, dish_description,
                                               price)
            except Exception as e:
                bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
                logger.error(f"Error in process_dish_price_step: {e}")

        def process_dish_image_step(message, category_id, dish_name, dish_description, price):
            try:
                from storage.dish_storage import add_dish  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∫ –≤ –≤–∞—à–µ–º –∏—Å—Ö–æ–¥–Ω–æ–º –∫–æ–¥–µ

                if message.text == '/skip':
                    image_url = None
                else:
                    if message.text.startswith('/'):
                        bot.reply_to(message, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ URL, –∞ –Ω–µ –∫–æ–º–∞–Ω–¥—É")
                        return

                    image_url = message.text.strip()
                    if len(image_url) > 255:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–∞–∫ –≤ –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏ (VARCHAR(255))
                        bot.reply_to(message, "‚ö†Ô∏è URL —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å. 255 —Å–∏–º–≤–æ–ª–æ–≤)")
                        return

                # –î–æ–±–∞–≤–ª—è–µ–º –±–ª—é–¥–æ
                add_dish(
                    category_id=category_id,
                    name=dish_name,
                    description=dish_description,
                    price=price,
                    image_url=image_url
                )
                bot.reply_to(message, f"‚úÖ –ë–ª—é–¥–æ '{dish_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")

            except ValueError as e:
                bot.reply_to(message, f"‚ùå {str(e)}")
            except Exception as e:
                bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–ª—é–¥–∞")
                logger.error(f"Error adding dish: {e}")

        @bot.message_handler(commands=['dishes'])
        def handle_list_dishes(message):
            from storage.dish_storage import get_all_dishes_by_category
            dishes = get_all_dishes_by_category(1)  # –ü–æ–ª—É—á–∞–µ–º –±–ª—é–¥–∞ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å ID=1
            if dishes:
                response = "\n".join([f"{d.id}. {d.name} ‚Äî {d.price} —Ä—É–±." for d in dishes])
            else:
                response = "–ë–ª—é–¥ –ø–æ–∫–∞ –Ω–µ—Ç"
            bot.reply_to(message, f"–ë–ª—é–¥–∞:\n{response}")


        @bot.message_handler(commands=['start'])
        def handle_start(message):
            from models.user import User
            from storage.user_storage import add_user

            try:
                user = User(
                    telegram_id=message.from_user.id,
                    username=message.from_user.username,
                    first_name=message.from_user.first_name
                )
                add_user(user)
                bot.reply_to(message, "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
                bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        bot.infinity_polling(long_polling_timeout=10)

    except Exception as e:
        logger.critical(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

if __name__ == "__main__":
    main()
    try:
        # –£–¥–µ—Ä–∂–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —á—Ç–æ–±—ã –±–æ—Ç —Ä–∞–±–æ—Ç–∞–ª
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


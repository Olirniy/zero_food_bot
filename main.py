# main.py

from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)
import database
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ ID –∞–¥–º–∏–Ω–∞ –∏–∑ .env
TOKEN = os.getenv("TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
# –ü–æ—Ç–æ–º –∏—Å–ø—Ä–∞–≤–∏–º –ø–æ–ª—É—á–µ–Ω–∏–µ TOKEN –∏ ADMIN_ID –∏–∑ env, –∞ —Å–µ–π—á–∞—Å –ø—Ä–æ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á–∏–º –∑–¥–µ—Å—å:
# ADMIN_ID = —Å—é–¥–∞ –º–æ–∂–Ω–æ –≤–ø–∏—Å–∞—Ç—å –Ω—É–∂–Ω—ã–π ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
# TOKEN = '—Å—é–¥–∞ –º–æ–∂–Ω–æ –≤–ø–∏—Å–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω'

# –•—Ä–∞–Ω–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /order –¥–ª—è –∑–∞–∫–∞–∑–∞ –∏–ª–∏ /review –¥–ª—è –æ—Ç–∑—ã–≤–∞.")


async def leave_review(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_states[user_id] = "awaiting_review"
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:")


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text

    if user_states.get(user_id) == "awaiting_review":
        username = update.effective_user.username or None
        database.save_review(user_id, username, text)
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!")
        user_states[user_id] = None
    else:
        await update.message.reply_text("–Ø –Ω–µ –æ–∂–∏–¥–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤–∞—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã.")


async def order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ã –Ω–∞—á–∞–ª–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞... (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–¥–µ—Å—å)")

async def admin_reviews(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if user_id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∑—ã–≤—ã –∏–∑ –ë–î
    reviews = database.get_all_reviews()

    if not reviews:
        await update.message.reply_text("–û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥
    message = "üìã –í—Å–µ –æ—Ç–∑—ã–≤—ã:\n\n"
    for review in reviews:
        _, user_id, username, text, created_at = review
        message += f"üìÖ {created_at}\n"
        message += f"üë§ ID: {user_id}, @{username}\n"
        message += f"üìù –û—Ç–∑—ã–≤: {text}\n"
        message += "-" * 30 + "\n"

    # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —Ä–∞–∑–±–∏–≤–∞–µ–º
    if len(message) > 4096:
        for chunk in [message[i:i+4096] for i in range(0, len(message), 4096)]:
            await update.message.reply_text(chunk)
    else:
        await update.message.reply_text(message)

def main():
    database.init_db()

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("review", leave_review))
    app.add_handler(CommandHandler("order", order))
    app.add_handler(CommandHandler("admin_reviews", admin_reviews))  # –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


if __name__ == "__main__":
    main()
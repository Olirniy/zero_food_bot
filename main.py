import telebot
from config import TG_API_KEY
from log_funcs import logger
from storage.db import init_db
import time
from storage.db import engine, init_db
from sqlalchemy import inspect
from telebot import types
import logging
from urllib.parse import urlparse

logger = logging.getLogger(__name__)


class DishHandler:
    def __init__(self, bot):
        self.bot = bot

    def log_input(self, step: str, user_input: str, user_id: int):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        logger.info(f"User {user_id} at step '{step}': {user_input}")

    def process_dish_image(self, message, category_id, dish_name, description, price):
        try:
            from storage.dish_storage import add_dish

            self.log_input("image_url", message.text, message.from_user.id)
            image_url = None if message.text == '/skip' else message.text.strip()

            if image_url:
                parsed = urlparse(image_url)
                if not all([parsed.scheme, parsed.netloc]):
                    raise ValueError("URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")
                if len(image_url) > 255:
                    raise ValueError("URL —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å. 255 —Å–∏–º–≤–æ–ª–æ–≤)")

            add_dish(
                name=str(dish_name),
                description=str(description) if description else None,
                price=float(price),
                category_id=int(category_id),
                image_url=str(image_url) if image_url else None
            )
            self.bot.reply_to(message, f"‚úÖ –ë–ª—é–¥–æ '{dish_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")

        except ValueError as e:
            self.bot.reply_to(message, f"‚ùå {str(e)}")
            logger.error(f"Image URL error from user {message.from_user.id}: {e}")
        except Exception as e:
            self.bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–ª—é–¥–∞")
            logger.error(f"Dish addition error from user {message.from_user.id}: {e}")

    def process_dish_price(self, message, category_id, dish_name, description):
        try:
            self.log_input("price", message.text, message.from_user.id)
            price = message.text.strip().replace(',', '.')

            if not price.replace('.', '').isdigit():
                raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 250.50)")

            price = float(price)
            if price <= 0:
                raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è")

            msg = self.bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∏–ª–∏ /skip):")
            self.bot.register_next_step_handler(msg,
                                                lambda m: self.process_dish_image(m, category_id, dish_name,
                                                                                  description, price))

        except ValueError as e:
            self.bot.reply_to(message, f"‚ùå {str(e)}")
            logger.warning(f"Invalid price from user {message.from_user.id}: {message.text}")
            msg = self.bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –µ—â–µ —Ä–∞–∑:")
            self.bot.register_next_step_handler(msg,
                                                lambda m: self.process_dish_price(m, category_id, dish_name,
                                                                                  description))
        except Exception as e:
            self.bot.reply_to(message, "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")
            logger.error(f"Price processing error from user {message.from_user.id}: {e}")

    def process_dish_description(self, message, category_id, dish_name):
        try:
            self.log_input("description", message.text, message.from_user.id)
            description = None if message.text == '/skip' else message.text.strip()

            if description and len(description) > 255:
                raise ValueError("–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å. 255 —Å–∏–º–≤–æ–ª–æ–≤)")

            msg = self.bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –±–ª—é–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 250.50):")
            self.bot.register_next_step_handler(msg,
                                                lambda m: self.process_dish_price(m, category_id, dish_name,
                                                                                  description))

        except ValueError as e:
            self.bot.reply_to(message, f"‚ùå {str(e)}")
            logger.warning(f"Invalid description from user {message.from_user.id}: {message.text}")
        except Exception as e:
            self.bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞")
            logger.error(f"Description processing error from user {message.from_user.id}: {e}")

    def process_dish_name(self, message, category_id):
        try:
            self.log_input("dish_name", message.text, message.from_user.id)
            dish_name = message.text.strip()

            if dish_name.isdigit():
                raise ValueError("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            if len(dish_name) > 100:
                raise ValueError("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å. 100 —Å–∏–º–≤–æ–ª–æ–≤)")

            msg = self.bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞ (–∏–ª–∏ /skip):")
            self.bot.register_next_step_handler(msg,
                                                lambda m: self.process_dish_description(m, category_id,
                                                                                        dish_name))

        except ValueError as e:
            self.bot.reply_to(message, f"‚ùå {str(e)}")
            logger.warning(f"Invalid dish name from user {message.from_user.id}: {message.text}")
            self.handle_add_dish(message)  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        except Exception as e:
            self.bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞")
            logger.error(f"Name processing error from user {message.from_user.id}: {e}")

    def process_category_choice(self, message):
        try:
            self.log_input("category", message.text, message.from_user.id)
            category_id = int(message.text.split('.')[0])
            msg = self.bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞:",
                                    reply_markup=types.ReplyKeyboardRemove())
            self.bot.register_next_step_handler(msg,
                                                lambda m: self.process_dish_name(m, category_id))

        except (IndexError, ValueError):
            self.bot.reply_to(message, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞")
            logger.warning(f"Invalid category choice from user {message.from_user.id}: {message.text}")
            self.handle_add_dish(message)  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        except Exception as e:
            self.bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            logger.error(f"Category choice error from user {message.from_user.id}: {e}")

    def handle_add_dish(self, message):
        try:
            from storage.category_storage import get_categories

            categories = get_categories()
            if not categories:
                self.bot.reply_to(message,
                                  "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–µ—Ä–µ–∑ /addcategory")
                return

            markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
            for cat in categories:
                markup.add(f"{cat.id}. {cat.name}")

            msg = self.bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)
            self.bot.register_next_step_handler(msg, self.process_category_choice)

        except Exception as e:
            self.bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            logger.error(f"Add dish init error from user {message.from_user.id}: {e}")



def check_tables():
    init_db()
    inspector = inspect(engine)
    print("–¢–∞–±–ª–∏—Ü—ã –≤ –ë–î:", inspector.get_table_names())

check_tables()


def main():
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î (–±–µ–∑ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü)
        init_db()
        check_tables()

        bot = telebot.TeleBot(TG_API_KEY)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –±–ª—é–¥
        dish_handler = DishHandler(bot)

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        @bot.message_handler(commands=['adddish'])
        def add_dish_wrapper(message):
            logger.info(f"User {message.from_user.id} started /adddish command")
            dish_handler.handle_add_dish(message)



        @bot.message_handler(commands=['addcategory'])
        def handle_add_category(message):
            try:
                msg = bot.reply_to(message, "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
                bot.register_next_step_handler(msg, process_category_name_step)
            except Exception as e:
                bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
                logger.error(f"Error in addcategory handler: {e}")

        def process_category_name_step(message):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É
                if message.text.startswith('/'):
                    bot.reply_to(message, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∞ –Ω–µ –∫–æ–º–∞–Ω–¥—É")
                    return

                category_name = message.text.strip()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è
                if len(category_name) > 50:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–∞–∫ –≤ –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏ (VARCHAR(50))
                    bot.reply_to(message, "‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å. 50 —Å–∏–º–≤–æ–ª–æ–≤)")
                    return

                msg = bot.reply_to(message, "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
                bot.register_next_step_handler(msg, process_category_desc_step, category_name)
            except Exception as e:
                bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
                logger.error(f"Error in process_category_name_step: {e}")

        def process_category_desc_step(message, category_name):
            try:
                from storage.category_storage import add_category  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–º–µ–Ω–Ω–æ —Ç–∞–∫, –∫–∞–∫ —É –≤–∞—Å

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–ø—É—Å–∫ –æ–ø–∏—Å–∞–Ω–∏—è
                if message.text == '/skip':
                    category_description = None
                else:
                    category_description = message.text.strip()
                    if len(category_description) > 255:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–∞–∫ –≤ –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏ (VARCHAR(255))
                        bot.reply_to(message, "‚ö†Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å. 255 —Å–∏–º–≤–æ–ª–æ–≤)")
                        return

                # –ü—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                add_category(category_name, category_description)
                bot.reply_to(message, f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

            except ValueError as e:
                bot.reply_to(message, f"‚ùå {str(e)}")
            except Exception as e:
                bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
                logger.error(f"Error adding category: {e}")


        @bot.message_handler(commands=['categories'])
        def handle_list_categories(message):
            from storage.category_storage import get_categories
            categories = get_categories()
            if categories:
                response = "\n".join([f"{c.id}. {c.name}" for c in categories])
            else:
                response = "–ö–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–∫–∞ –Ω–µ—Ç"
            bot.reply_to(message, f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:\n{response}")


        @bot.message_handler(commands=['dishes'])
        def handle_list_dishes(message):
            from storage.category_storage import get_categories
            from storage.dish_storage import get_dishes_by_category

            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                categories = get_categories()
                if not categories:
                    bot.reply_to(message, "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ /addcategory")
                    return

                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
                markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
                for category in categories:
                    markup.add(f"{category.id}. {category.name}")

                # –ü—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                msg = bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–ª—é–¥:", reply_markup=markup)
                bot.register_next_step_handler(msg, lambda m: process_category_choice(m, categories))

            except Exception as e:
                bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
                logger.error(f"Error in /dishes command: {e}")

        def process_category_choice(message, categories):
            try:
                from storage.dish_storage import get_dishes_by_category

                # –ü–∞—Ä—Å–∏–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    selected_id = int(message.text.split('.')[0])
                except (ValueError, IndexError):
                    raise ValueError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                selected_category = next((cat for cat in categories if cat.id == selected_id), None)
                if not selected_category:
                    raise ValueError("–í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

                # –ü–æ–ª—É—á–∞–µ–º –±–ª—é–¥–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                dishes = get_dishes_by_category(selected_id)

                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                if dishes:
                    response = [f"üçΩ –ë–ª—é–¥–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{selected_category.name}':"]
                    for dish in dishes:
                        dish_info = f"  - {dish.name}: {dish.price} —Ä—É–±."
                        if dish.description:
                            dish_info += f" ({dish.description})"
                        response.append(dish_info)
                    bot.reply_to(message, "\n".join(response), reply_markup=types.ReplyKeyboardRemove())
                else:
                    bot.reply_to(message, f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{selected_category.name}' –ø–æ–∫–∞ –Ω–µ—Ç –±–ª—é–¥",
                                 reply_markup=types.ReplyKeyboardRemove())

            except ValueError as e:
                bot.reply_to(message, f"‚ö†Ô∏è {str(e)}")
                logger.warning(f"Invalid category choice: {message.text}")
            except Exception as e:
                bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–ª—é–¥")
                logger.error(f"Error showing dishes: {e}")


        def show_dishes_by_category(message):
            try:
                from storage.dish_storage import get_dishes_by_category

                # –ü–∞—Ä—Å–∏–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                category_id = int(message.text.split('.')[0])

                # –ü–æ–ª—É—á–∞–µ–º –±–ª—é–¥–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                dishes = get_dishes_by_category(category_id)

                if dishes:
                    response = "\n".join([
                        f"{d.id}. {d.name} - {d.price} —Ä—É–±." +
                        (f" ({d.description})" if d.description else "") +
                        (f"\n  üñº: {d.image_url}" if d.image_url else "")
                        for d in dishes
                    ])
                    bot.reply_to(message, f"üçΩ –ë–ª—é–¥–∞ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n{response}",
                                 reply_markup=types.ReplyKeyboardRemove())
                else:
                    bot.reply_to(message, "–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –±–ª—é–¥",
                                 reply_markup=types.ReplyKeyboardRemove())

            except (ValueError, IndexError):
                bot.reply_to(message, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞")
                logger.warning(f"Invalid category choice: {message.text}")
            except Exception as e:
                bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–ª—é–¥")
                logger.error(f"Error showing dishes: {e}")

        @bot.message_handler(commands=['all_dishes'])
        def handle_all_dishes(message):
            try:
                from storage.dish_storage import get_all_dishes_with_categories
                dishes_categories = get_all_dishes_with_categories()

                if not dishes_categories:
                    bot.reply_to(message, "üçΩ –ë–ª—é–¥ –ø–æ–∫–∞ –Ω–µ—Ç")
                    return

                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                from collections import defaultdict
                grouped = defaultdict(list)
                for dish, category in dishes_categories:
                    grouped[category.name].append(dish)

                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç–≤–µ—Ç
                response = ["üìã <b>–í—Å–µ –±–ª—é–¥–∞ –≤ –º–µ–Ω—é:</b>"]
                for category_name, dishes in grouped.items():
                    dish_list = []
                    for dish in dishes:
                        dish_info = f"  - {dish.name} - {dish.price} —Ä—É–±."
                        if dish.description:
                            dish_info += f" ({dish.description})"
                        dish_list.append(dish_info)

                    response.append(f"\nüçΩ <b>{category_name}:</b>\n" + "\n".join(dish_list))

                bot.reply_to(message, "\n".join(response), parse_mode='HTML')

            except Exception as e:
                bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±–ª—é–¥")
                logger.error(f"Error in all_dishes handler: {e}")


        @bot.message_handler(commands=['start'])
        def handle_start(message):
            from models.user import User
            from storage.user_storage import add_user, get_user_by_telegram_id
            import time

            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –ë–î
                existing_user = get_user_by_telegram_id(message.from_user.id)
                if existing_user:
                    bot.reply_to(message, "üëã –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
                    return

                # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞
                time.sleep(0.5)

                user = User(
                    telegram_id=message.from_user.id,
                    username=message.from_user.username,
                    first_name=message.from_user.first_name
                )
                add_user(user)

                welcome_text = """
        üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FoodNinja!</b>

        –Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –º–µ–Ω—é –≤–∞—à–µ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –∏–ª–∏ –∫–∞—Ñ–µ.

        üìå –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
        /help - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        /adddish - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –±–ª—é–¥–æ
        /dishes - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        /all_dishes - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–µ—Å—å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –±–ª—é–¥
        /ping - –ü—Ä–æ–≤–µ—Ä—å –∫–æ–Ω–Ω–µ–∫—Ç —Å —Å–µ—Ä–≤–µ—Ä–æ–º

        –ù–∞—á–Ω–∏—Ç–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —á–µ—Ä–µ–∑ /addcategory, –∑–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–π—Ç–µ –±–ª—é–¥–∞ —á–µ—Ä–µ–∑ /adddish.
                """
                bot.reply_to(message, welcome_text, parse_mode='HTML')

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
                time.sleep(1)  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
                bot.reply_to(message, "üîÅ –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.")


        @bot.message_handler(commands=['help'])
        def handle_help(message):
            logger.info(f"User {message.from_user.id} requested help")
            commands = {
                'üçΩ –ú–µ–Ω—é': [
                    ('/addcategory', '–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–ª—é–¥'),
                    ('/categories', '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'),
                    ('/adddish', '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –±–ª—é–¥–æ'),
                    ('/dishes', '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–ª—é–¥–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'),
                    ('/all_dishes', '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–µ—Å—å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –±–ª—é–¥')
                ],
                'üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ': [
                    ('/start', '–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞'),
                    ('/help', '–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º'),
                    ('/ping', '–ü—Ä–æ–≤–µ—Ä—å –∫–æ–Ω–Ω–µ–∫—Ç —Å —Å–µ—Ä–≤–µ—Ä–æ–º')
                ]
            }

            help_text = "<b>üç¥ FoodNinja Bot - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥</b>\n\n"

            for section, cmds in commands.items():
                help_text += f"<b>{section}:</b>\n"
                help_text += "\n".join([f"{cmd[0]} - {cmd[1]}" for cmd in cmds])
                help_text += "\n\n"

            bot.reply_to(message, help_text, parse_mode='HTML')

        @bot.message_handler(commands=['ping'])
        def ping(message):
            try:
                bot.reply_to(message, "üèì Pong!")
            except Exception as e:
                logger.error(f"Connection error: {e}")

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞


        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        bot.infinity_polling(long_polling_timeout=10)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ main: {e}")
        raise

if __name__ == "__main__":
    main()
    try:
        # –£–¥–µ—Ä–∂–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —á—Ç–æ–±—ã –±–æ—Ç —Ä–∞–±–æ—Ç–∞–ª
        while True:
            time.sleep(0.5)
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

